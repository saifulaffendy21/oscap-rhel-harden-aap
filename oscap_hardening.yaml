---
- name: RHEL OS Hardening with OSCAP
  hosts: all
  gather_facts: true
  become: true
  vars_files: katakunciku.yaml # ansible vault
  vars:
#    rhsm_admin_user:   # CONFIG VIA AAP
#    rhsm_admin_pass:   # CONFIG VIA AAP
    oscap_remediation: "NO"   # CONFIG VIA AAP
    oscap_generate_yaml: "NO"
#    oscap_security_profile: "xccdf_org.ssgproject.content_profile_cis_server_l1"
#    satellite_server: "192.168.8.13"   # CONFIG VIA AAP
#    satellite_organization: "NewWikiLabs"   # CONFIG VIA AAP

  tasks:
    - name: Extract OS major version from facts
      set_fact:
        ansible_distribution_major_version: "{{ ansible_distribution_version.split('.')[0] }}"

    - name: Check if the playbook is running on supported RHEL versions
      fail:
        msg: "This playbook only supports RHEL 8 & 9. You are running {{ ansible_distribution }} version {{ ansible_distribution_version }}."
      when:
        - ansible_distribution != "RedHat"
        - ansible_distribution_major_version not in ["8", "9"]

    - name: Check subscription-manager status
      command: subscription-manager status
      register: rhsm_status_output
      failed_when: false  # Prevent failure if system is not registered
      changed_when: false  # This task only checks the status

    - name: Register RHEL system into Satellite server
      import_playbook: task_rhel89_satellite.yaml
      when: "'Overall Status: Unknown' in rhsm_status_output.stdout"

    - name: Install OpenSCAP and SSG tools
      yum:
        name:
          - openscap-scanner
          - scap-security-guide
          - openscap-utils
        state: present

    - name: Get the current timestamp
      command: date +%Y%m%d_%H%M%S
      register: v_backup_timestamp
      changed_when: false

    - name: Set fact for v_oscap_report_filename
      set_fact:
        v_oscap_report_filename: "{{ ansible_facts['hostname'] }}-scap-report-{{ v_backup_timestamp.stdout }}"

    - name: Ensure SCAP data stream exists
      stat:
        path: "/usr/share/xml/scap/ssg/content/ssg-rhel{{ ansible_distribution_major_version }}-ds.xml"
      register: scap_content
      
    - name: Fail if SCAP content is missing
      fail:
        msg: "SCAP content not found for RHEL {{ ansible_distribution_major_version }}"
      when: scap_content.stat.exists == false

    - name: Run oscap xccdf evaluation (before)
      command: "oscap xccdf eval --profile {{ oscap_security_profile }} --results /tmp/{{ v_oscap_report_filename }}-before.xml --report /tmp/{{ v_oscap_report_filename }}-before.html /usr/share/xml/scap/ssg/content/ssg-rhel{{ ansible_distribution_major_version }}-ds.xml"
      args:
        chdir: /tmp  # Optional: Run the command in a specific directory
      register: oscap_generate_output  # Capture the command output
      failed_when: oscap_generate_output.rc != 0
      changed_when: true  # Mark task as changed because the command runs an evaluation
      ignore_errors: true

    - name: Generate oscap generate fix (Ansible)
      command: "oscap xccdf generate fix --fix-type ansible --output /tmp/{{ v_oscap_report_filename }}_playbookToRemediate.yml --result-id '' /tmp/{{ v_oscap_report_filename }}-before.xml"
      args:
        chdir: /tmp  # Optional: Run the command in a specific directory
      register: oscap_generate_fix  # Capture the command output
      failed_when: oscap_generate_fix.rc != 0
      changed_when: true  # Mark task as changed because the command runs an evaluation
      ignore_errors: true
      when: oscap_generate_yaml == "YES"

    - name: Debug oscap output
      debug:
        var: oscap_generate_output.stdout

    - name: Remediate and re-evaluate system with OpenSCAP
      block:
        - name: Run oscap remediation
          command: "oscap xccdf eval --profile {{ oscap_security_profile }} --remediate /usr/share/xml/scap/ssg/content/ssg-rhel{{ ansible_distribution_major_version }}-ds.xml"
          register: oscap_remediation_output
          changed_when: true
          ignore_errors: true          

        - name: Debug oscap output
          debug:
            var: oscap_remediation_output.stdout

        - name: Run oscap xccdf evaluation (after remediation)
          command: "oscap xccdf eval --profile {{ oscap_security_profile }} --results /tmp/{{ v_oscap_report_filename }}-after.xml --report /tmp/{{ v_oscap_report_filename }}-after.html /usr/share/xml/scap/ssg/content/ssg-rhel{{ ansible_distribution_major_version }}-ds.xml"
          args:
            chdir: /tmp  # Optional: Run the command in a specific directory
          register: oscap_remediated_output  # Capture the command output
          changed_when: oscap_remediated_output.rc == 0  # Mark task as changed because the command runs an evaluation
          ignore_errors: true

        - name: Debug oscap output
          debug:
            var: oscap_remediated_output.stdout

      when: oscap_remediation == "YES"
...
